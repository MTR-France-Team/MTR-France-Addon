plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id "org.spongepowered.mixin" version "+"
}

minecraft {
    mappings channel: "official", version: rootProject.minecraft_version
    runs {
        configureEach {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
        }
        client {
            property 'forge.enabledGameTestNamespaces', archives_base_name
        }
        server { args "--nogui" }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${rootProject.minecraft_version}-${project.properties["forge_version_$rootProject.minecraft_version"]}"
    implementation fg.deobf("maven.modrinth:minecraft-transit-railway:FORGE-${rootProject.mtr_version}+${rootProject.minecraft_version}")

    implementation 'org.slf4j:slf4j-api:1.7.28'
    implementation 'org.slf4j:slf4j-simple:1.7.28'

    annotationProcessor "org.spongepowered:mixin:+:processor"
    annotationProcessor 'systems.manifold:manifold-preprocessor:+'
}

mixin {
    add sourceSets.main, "mtrfranceaddon.refmap.json"
    config "mtrfranceaddon.mixins.json"
    debug.verbose = true
    debug.export = true
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(java_version))
    }
    withSourcesJar()
}

artifacts {
    archives jar
}

reobf {
    shadowJar {}
}

assemble.dependsOn(shadowJar)

tasks.register("moveBuild") {
    doLast {
        delete fileTree("../build").matching {
            include "**/*forge*"
        }
        copy {
            from "build/libs/MTRFranceAddon-forge-${version}-all.jar"
            into "../build"
            rename { fileName -> fileName.replace("-all", "") }
        }
    }
}

afterEvaluate {
    for (def task in it.tasks) {
        if (task == tasks.build) {
            task.finalizedBy tasks.moveBuild
        }
    }
}
