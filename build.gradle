plugins {
    id 'com.gradleup.shadow' version '8.3.4' apply false
}

// Configuration pour tous les sous-projets
configure(subprojects) {
    apply plugin: "java"
    apply plugin: 'com.gradleup.shadow'

    group project.maven_group
    version "${rootProject.properties.mod_version}+${rootProject.properties.minecraft_version}"

    configurations {
        shadowImplementation
        implementation.extendsFrom shadowImplementation
    }

    base {
        archivesName = "${rootProject.archives_base_name}-${project.properties.loader_name}"
    }

    dependencies {
        implementation 'com.google.code.findbugs:jsr305:+'
    }

    repositories {
        maven { url "https://jitpack.io" }
    }

    shadowJar {
        configurations = [project.configurations.shadowImplementation]
    }

    // Calcul de la version Java
    def mc_ver = rootProject.properties.minecraft_version
    def mc_major = mc_ver.split("\\.")[0]
    def mc_main = mc_ver.split("\\.")[1]
    def mc_minor = mc_ver.split("\\.").size() > 2 ? (mc_ver.split("\\.")[2] as String).padLeft(2, '0') : 0
    def merged_mc_version = "$mc_major$mc_main$mc_minor"

    ext {
        //java_version = 17
        
        java_version =
                (merged_mc_version as int) <= 11605 ? 8 :
                (merged_mc_version as int) <= 11701 ? 16 :
                (merged_mc_version as int) <= 12004 ? 17 :
                21

        lg_unicode = (mc_main as int) <= 19 ? rootProject.properties.legacy_unicode_font : rootProject.properties.modern_fallback_font
        full_mod_version = version + artifact_date
    }

    // Support Manifold
    tasks.withType(JavaCompile).forEach {
        it.options.compilerArgs += [
                 "-Xplugin:Manifold",
                 "-AMC_VERSION=$merged_mc_version",
                 "-ALOADER=$project.properties.loader_name"
        ]
    }

    compileJava {
        options.encoding = 'UTF-8'
    }

    processResources {
        inputs.property "version", version + artifact_date
        inputs.property "minecraft_version", rootProject.minecraft_version

        filesMatching('META-INF/mods.toml') {
            expand (
                    "minecraft_version": minecraft_version,
                    "mod_version": project.full_mod_version
            )
        }

        filesMatching("fabric.mod.json") {
            expand (
                    "version": project.full_mod_version,
                    "minecraft_version": rootProject.minecraft_version
            )
        }
    }
}

// Copie les fichiers communs
tasks.register("setupFiles") {
    var sourceModloader = "fabric"

    doLast {
        for(targetModloader in ["forge"]) {
            // Supprime les anciens fichiers
            delete fileTree("${targetModloader}/src/main/java/fr/mtrfranceaddon/mod")
            delete fileTree("${targetModloader}/src/main/resources/assets")
            delete fileTree("${targetModloader}/src/main/resources/data")

            copy {
                from "${sourceModloader}/src/main/java/fr/mtrfranceaddon/mod/common"
                into "${targetModloader}/src/main/java/fr/mtrfranceaddon/mod/common"
            }

            copy {
                from "${sourceModloader}/src/main/java/fr/mtrfranceaddon/mod/mixin"
                into "${targetModloader}/src/main/java/fr/mtrfranceaddon/mod/mixin"
            }

            copy {
                from "${sourceModloader}/src/main/resources/assets"
                into "${targetModloader}/src/main/resources/assets"
            }

            copy {
                from "${sourceModloader}/src/main/resources/data"
                into "${targetModloader}/src/main/resources/data"
            }
        }
    }
}